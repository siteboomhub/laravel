<?php

namespace Tests\Unit\League\Classes;

use App\Services\League\Strategies\PlayWeekStrategy;
use Unit\League\Classes\StrategyPlay;

class PlayWeekStrategyTest extends StrategyPlay
{
    public function providerForFourTeams()
    {
        return [
            [
                '123' => 2,
                '234' => 3,
                '12345' => 2,
                '12346' => 3
            ]
        ];
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->match->method('getTeams')->willReturn([
            $this->team, $this->team
        ]);
    }

    /*
     * @dataProvider providerForFourTeams
     */
    public function testThatResultsAreWithCorrectStructure($teams)
    {
        $this->checkThatResultsAreWithCorrectStructure($teams, new PlayWeekStrategy());
    }

    /*
     * @dataProvider providerForFourTeams
     */
    public function testThatCurrentWeekIsLastAfterPlayWhenStarted($teams)
    {
        $this->addConsecutiveCalls($teams);

        $playWeekStrategy = new PlayWeekStrategy();

        $current_week = 0;

        $results = $playWeekStrategy->play(
            1,
            $current_week,
            [$this->match, $this->match]
        );

        $this->assertEquals($current_week + 1, $results['week']);
    }

    /*
     * @dataProvider providerForFourTeams
     */
    public function testThatCurrentWeekIsLastAfterPlayWhenAnyAllowed($teams)
    {
        $this->addConsecutiveCalls($teams);

        $playWeekStrategy = new PlayWeekStrategy();

        $results = $playWeekStrategy->play(
            1,
            1,
            [$this->match, $this->match]
        );

        $this->assertEquals(2, $results['week']);
    }
}
